# –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ üéì‚ú®
import sqlite3
import telebot
from telebot import types

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞ (–∫–∞–∫ –≤–∫–ª —Ç–µ–ª–µ—Ñ–æ–Ω üì±)
bot = telebot.TeleBot("8050066037:AAGrBK-xrXjXWXB5AGJHk0oJaWP3oFtGodM")  # üëà —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤—Å—Ç–∞–≤–∏—Ç—å!

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —Ç–µ—Ç—Ä–∞–¥–∫–∞ üìí)
conn = sqlite3.connect('profession_helper.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—á–∫–∏ (—Ä–∞–∑–¥–µ–ª—ã –≤ —Ç–µ—Ç—Ä–∞–¥–∫–µ üìù)
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   name TEXT,
                   direction TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS answers
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   question_num INTEGER,
                   answer INTEGER)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS professions
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   direction TEXT,
                   result_type TEXT,
                   name TEXT,
                   description TEXT)''')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (—á—Ç–æ–±—ã –±—ã–ª–æ –∏–∑ —á–µ–≥–æ –≤—ã–±–∏—Ä–∞—Ç—å üíº)
professions_data = [
    ('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π', '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π', '–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç', '–ü–∏—à–µ—à—å —Å—Ç–∞—Ç—å–∏ –∏ –±–µ—Ä–µ—à—å –∏–Ω—Ç–µ—Ä–≤—å—é —É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π! '),
    ('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π', '–ê–Ω–∞–ª–∏—Ç–∏–∫', '–ü—Å–∏—Ö–æ–ª–æ–≥', '–ü–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö '),
    ('–¢–µ—Ö–Ω–∞—Ä—å', '–õ–æ–≥–∏–∫', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–°–æ–∑–¥–∞–µ—à—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∞–π—Ç—ã, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–æ–ª—à–µ–±–Ω–∏–∫! '),
    ('–¢–µ—Ö–Ω–∞—Ä—å', '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π', '–î–∏–∑–∞–π–Ω–µ—Ä', '–ü—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –∫—Ä–∞—Å–∏–≤—ã–µ —Å–∞–π—Ç—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è '),
    ('–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–£–º–Ω–∏–∫', '–£—á–µ–Ω—ã–π', '–ü—Ä–æ–≤–æ–¥–∏—à—å –æ–ø—ã—Ç—ã –∏ –¥–µ–ª–∞–µ—à—å –æ—Ç–∫—Ä—ã—Ç–∏—è! '),
    ('–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–ü–æ–º–æ—â–Ω–∏–∫', '–í—Ä–∞—á', '–õ–µ—á–∏—à—å –ª—é–¥–µ–π –∏ —Å–ø–∞—Å–∞–µ—à—å –∂–∏–∑–Ω–∏! üë©')
]

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤ –±–∞–∑–µ
if cursor.execute("SELECT COUNT(*) FROM professions").fetchone()[0] == 0:
    cursor.executemany("INSERT INTO professions (direction, result_type, name, description) VALUES (?, ?, ?, ?)", professions_data)
    conn.commit()

# –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ (–∏—Ö 10) ‚ùì
questions = [
    "1. –¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è —Å –ª—é–¥—å–º–∏? üí¨",
    "2. –õ—é–±–∏—à—å —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∫–∏? ÔøΩ",
    "3. –ù—Ä–∞–≤–∏—Ç—Å—è –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º? ü§ù",
    "4. –õ—é–±–∏—à—å —á—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏? ‚úÇÔ∏è",
    "5. –¢–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã –≤–µ—â–∏? üîç",
    "6. –ù—Ä–∞–≤–∏—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è? üéâ",
    "7. –õ—é–±–∏—à—å –ø–∏—Å–∞—Ç—å —Å–æ—á–∏–Ω–µ–Ω–∏—è? üìù",
    "8. –ù—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ü–∏—Ñ—Ä–∞–º–∏? üî¢",
    "9. –•–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ? üåç",
    "10. –ú–µ—á—Ç–∞–µ—à—å –æ –Ω–µ–æ–±—ã—á–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏? üöÄ"
]

# –ö–Ω–æ–ø–æ—á–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ üîò
def make_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('1 - –ù–µ –ø—Ä–æ –º–µ–Ω—è üôÖ‚Äç‚ôÄÔ∏è'))
    markup.add(types.KeyboardButton('2 - –°–∫–æ—Ä–µ–µ –Ω–µ—Ç üôà'))
    markup.add(types.KeyboardButton('3 - –ù–µ –∑–Ω–∞—é ü§∑‚Äç‚ôÄÔ∏è'))
    markup.add(types.KeyboardButton('4 - –°–∫–æ—Ä–µ–µ –¥–∞ üëç'))
    markup.add(types.KeyboardButton('5 - –¢–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è! üíØ'))
    return markup

# –ö–Ω–æ–ø–æ—á–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üó∫Ô∏è
def direction_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π üìö'))
    markup.add(types.KeyboardButton('–¢–µ—Ö–Ω–∞—Ä—å üíª'))
    markup.add(types.KeyboardButton('–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üî¨'))
    return markup

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º üèÅ
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id, 
                    f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
                    "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é!\n"
                    "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
                    reply_markup=direction_buttons())
    
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("INSERT OR IGNORE INTO users (user_id, name) VALUES (?, ?)", 
                   (message.from_user.id, message.from_user.first_name))
    conn.commit()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üß≠
@bot.message_handler(func=lambda m: m.text in ['–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π üìö', '–¢–µ—Ö–Ω–∞—Ä—å üíª', '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üî¨'])
def choose_direction(message):
    direction = message.text.split()[0]
    cursor.execute("UPDATE users SET direction = ? WHERE user_id = ?", 
                   (direction, message.from_user.id))
    conn.commit()
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –±—ã–ª–∏
    cursor.execute("DELETE FROM answers WHERE user_id = ?", (message.from_user.id,))
    conn.commit()
    
    bot.send_message(message.chat.id, 
                    f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª(–∞) {direction} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ! üåü\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n"
                    + questions[0],
                    reply_markup=make_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üìù
user_answers = {}  # –ó–¥–µ—Å—å –≤—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–º –æ—Ç–≤–µ—Ç—ã

@bot.message_handler(func=lambda m: any(str(i) in m.text for i in range(1,6)))
def handle_answer(message):
    try:
        answer = int(message.text.split()[0])
        user_id = message.from_user.id
        
        # –£–∑–Ω–∞–µ–º —Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ —É–∂–µ –¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT COUNT(*) FROM answers WHERE user_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        
        if count < len(questions):
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–≤–µ—Ç
            cursor.execute("INSERT INTO answers (user_id, question_num, answer) VALUES (?, ?, ?)", 
                          (user_id, count+1, answer))
            conn.commit()
            
            # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if count + 1 < len(questions):
                bot.send_message(message.chat.id, questions[count+1], reply_markup=make_keyboard())
            else:
                show_results(message)
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòÖ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑!")
        bot.send_message(message.chat.id, questions[0], reply_markup=make_keyboard())

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üéØ
def show_results(message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT answer FROM answers WHERE user_id = ? ORDER BY question_num", (user_id,))
    answers = [row[0] for row in cursor.fetchall()]
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT direction FROM users WHERE user_id = ?", (user_id,))
    direction = cursor.fetchone()[0]
    
    # –°—á–∏—Ç–∞–µ–º –±–∞–ª–ª—ã
    social = answers[0] + answers[2] + answers[5] + answers[6]  # –û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    logic = answers[1] + answers[4] + answers[7] + answers[9]   # –õ–æ–≥–∏–∫–∞
    creative = answers[3] + answers[6] + answers[8]             # –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
    if social >= logic and social >= creative:
        result_type = '–û–±—â–∏—Ç–µ–ª—å–Ω—ã–π'
    elif logic >= social and logic >= creative:
        result_type = '–õ–æ–≥–∏–∫'
    else:
        result_type = '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π'
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    cursor.execute("SELECT name, description FROM professions WHERE direction = ? AND result_type = ?", 
                   (direction, result_type))
    professions = cursor.fetchall()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    msg = f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_type}!\n\n" \
          f"–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç —ç—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏:\n\n"
    
    for prof in professions:
        msg += f"<b>{prof[0]}</b> - {prof[1]}\n\n"
    
    msg += "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏ /start üé≤"
    
    bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=types.ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞! üöÄ
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞–µ–º! üí™")
bot.polling(none_stop=True)


